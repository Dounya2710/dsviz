---
title: "Spatial data and Cartography"
subtitle: ""
author: "Etienne Côme"
lang: en
execute:
  echo: true
format:
  revealjs:
    output-file: lecture-slides.html
    slide-number: true
    menu: false
    progress: false
---

# The spatial eco-system in R

```{r, echo=FALSE}
# Paramétrage différent entre sortie html et revealjs
code_folding = ifelse(knitr::pandoc_to()=="html", "false", "true")
```

```{css}
/*| echo: false */
[id^="section"] .anchored {
  margin: 0;
  border: 0;
  padding:0;
}
[id^="section"] .anchorjs-link {
  display:none;
}
```


```{r installPackages, echo=FALSE, include=FALSE}
## Liste des librairies utilisées
packages <- c("dplyr", "mapview", "sf", "osmdata",
              "RColorBrewer", "ggplot2", "readr",
              "ggspatial", "sfnetworks", "tidygraph", "remotes", 
              "tidygeocoder","btb")
## Vérifier si la librairie est installée, si non l'installer, puis la charger
package.check <- lapply(
  packages,
  FUN = function(x) {
    if (!require(x, character.only = TRUE)) {
      install.packages(x, dependencies = TRUE)
      library(x, character.only = TRUE)
    }
  }
)
```

## Introduction to `sf` 

*  `sf`: [Simple Features for R](https://r-spatial.github.io/sf/index.html)

* sf stands for Simple Features

* Ease the manipulation of spatial data 

* [Tidy data](http://vita.had.co.nz/papers/tidy-data.html): works with the ` |>  ` and dplyr verbs.

* Author : Edzer Pebesma 


## An sf object: 

<img src="img/sf.png" alt="format sf" width="100%">

geographical vector primitive 

- point(s) / line(s) / polygons(s) / multi-*
- leverage well known text format (wkt) / well known binary (wkb)



## Read / write data

Read

Main formats shp, geojson, kml, geopkg, topojson...

```{r, echo = TRUE, comments = FALSE}
library(sf)
mtq <- read_sf("data/mtq/martinique.shp")
mtq <- st_read("data/mtq/martinique.shp")
```

Some more info on geographical file format.

+ note geoparquet (geoarrow package)

## Read / write data

Write

```{r, eval = FALSE, echo = TRUE}
#exporter
write_sf(mtq,"data/mtq/martinique.gpkg",delete_layer = TRUE)
st_write(mtq,"data/mtq/martinique.gpkg",delete_layer = TRUE)
```

The gpkg (geopackage) format is open (not linked to an operating system) and implemented as a SQLite database. Also note the existence of the geo-parquet format, which is extremely efficient for processing large volumes of spatial data.


## Coordinates systems and epsg codes

Projections/coordinate systems are listed using a code called an epsg code:

- lat/long : 4326 [https://epsg.io/4326](https://epsg.io/4326)
- Lambert 93 : 2154 [https://epsg.io/2154](https://epsg.io/2154)
- Pseudo-Mercator : 3857 [https://epsg.io/3857](https://epsg.io/3857)
- Lambert azimuthal equal area : 3035 [https://epsg.io/3035](https://epsg.io/3035)


Un-projected / Projected / 2D / 3D / ...

## Projection 

Get the projection using 'st_crs()' ([epsg code](https://epsg.io/)) and edit it using 'st_transform()'.

<small>
'sf' uses the default spherical geometry for data that has not been projected since version 1.0 thanks to the 's2' library. See [https://r-spatial.github.io](https://r-spatial.github.io/sf/articles/sf7.html) for details.
</small>


```{r}
st_crs(mtq)
```


## Projection 

Get the projection using 'st_crs()' ([epsg code](https://epsg.io/)) and edit it using 'st_transform()'.

<small>
'sf' uses the default spherical geometry for data that has not been projected since version 1.0 thanks to the 's2' library. See [https://r-spatial.github.io](https://r-spatial.github.io/sf/articles/sf7.html) for details.
</small>

```{r}
mtq_4326 <- mtq |> st_transform(4326)
```

## Ploting

Default:

```{r, nm=TRUE}
plot(mtq)
```

##

Only the geometry:

```{r, nm=TRUE}
plot(st_geometry(mtq))
```

# Spatial processing

## Centroids

```{r, nm=TRUE}
mtq_c <- st_centroid(mtq) 
plot(st_geometry(mtq))
plot(st_geometry(mtq_c), add = TRUE, cex = 1.2, col = "red", pch = 20)
```

## Distances

```{r, nm=TRUE}
mat <- st_distance(x = mtq_c, y = mtq_c)
mat[1:5, 1:5]
```

## Aggregation 

Union : 

```{r, nm = TRUE}
mtq_u <- st_union(mtq)
plot(st_geometry(mtq), col="lightblue")
plot(st_geometry(mtq_u), add=T, lwd=2, border = "red")
```

##

Using a categorical features, dplyr style:

```{r, nm = TRUE}
library(dplyr)
mtq_u2 <- mtq |> 
  group_by(STATUT) |> 
  summarize(P13_POP = sum(P13_POP))
plot(st_geometry(mtq), col="lightblue")
plot(st_geometry(mtq_u2), add = TRUE, lwd = 2, border = "red", col = NA)
```

## Buffers


```{r, nm = TRUE}
mtq_b <- st_buffer(x = mtq_u, dist = 5000)
plot(st_geometry(mtq), col = "lightblue")
plot(st_geometry(mtq_u), add = TRUE, lwd = 2)
plot(st_geometry(mtq_b), add = TRUE, lwd = 2, border = "red")
```

## Intersections

First lets create a polygon from scratch

```{r, nm=TRUE}
m <- rbind(c(700015,1624212), c(700015,1641586), c(719127,1641586), 
           c(719127,1624212), c(700015,1624212))
p <- st_sf(st_sfc(st_polygon(list(m))), crs = st_crs(mtq))
plot(st_geometry(mtq))
plot(p, border = "red", lwd = 2, add = TRUE)
```

##

'st_intersection()' extracts the part of 'mtq' that intersects with the created polygon.

```{r, nm=TRUE, warning=F}
mtq_z <- st_intersection(x = mtq, y = p)
plot(st_geometry(mtq))
plot(st_geometry(mtq_z), col = "red", border = "green", add = TRUE)
```


## Counts points in polygon !

`st_sample()` sample random points inside the specified geographical object.

```{r , echo = FALSE}
set.seed(1) #Fixer l'aléa pour toujours faire la même carte.
```

```{r, nm=TRUE}
pts <- st_sample(x = mtq, size = 50)
plot(st_geometry(mtq))
plot(pts, pch = 20, col = "red", add=TRUE, cex = 1)
```

##

'st_join' is used to perform a spatial join.


<small>
It is possible to fine-tune the join (points on borders,...) with the 'join' argument, which by default is set to 'st_intersects()'. See [here](https://en.wikipedia.org/wiki/DE-9IM) for a precise definition of possible spatial predicates.
</small>

```{r p0a, nm=TRUE}
mtq_counts <- mtq |>
  st_join(st_as_sf(pts))

head(mtq_counts |> select(INSEE_COM),3)
```

##

```{r p0b, nm=TRUE}
mtq_counts <- mtq_counts |>
count(INSEE_COM)

head(mtq_counts)
```

##

```{r p0c, nm=TRUE}
plot(mtq_counts|> select(n))
plot(pts, pch = 20, col = "red", add = TRUE, cex = 1)
```

## Voronoi diagram

A Voronoi diagram is a division of the plane into cells (adjacent regions, called Voronoi polygons) from a discrete set of points. Each cell encloses a single point, and forms the set of points in the plane that are closer to that point than to any other.




##

```{r, echo=TRUE,warning=FALSE,message=FALSE,fig.show='last',fig.height=4.5}
mtq_v <- st_collection_extract(st_voronoi(x = st_union(mtq_c)))
mtq_v <- st_intersection(mtq_v, st_union(mtq))
mtq_v <- st_join(x = st_sf(mtq_v), y = mtq_c)
plot(st_geometry(mtq_v), col='lightblue')
```

## Spatial Processing

- st_area(x)
- st_length(x)
- st_disjoint(x, y, sparse = FALSE)
- st_touches(x, y, sparse = FALSE)
- st_crosses(s, s, sparse = FALSE)
- st_within(x, y, sparse = FALSE)
- st_contains(x, y, sparse = FALSE)
- st_overlaps(x, y, sparse = FALSE)

##

- st_equals(x, y, sparse = FALSE)
- st_covers(x, y, sparse = FALSE)
- st_covered_by(x, y, sparse = FALSE)
- st_equals_exact(x, y,0.001, sparse = FALSE)
- ...

## Conversion
- st_cast 
- st_collection_extract
- st_sf
- st_as_sf
- st_as_sfc




# Cartography web and static

In this part, we will visualize data from [road traffic injuries](https://www.data.gouv.fr/fr/datasets/bases-de-donnees-annuelles-des-accidents-corporels-de-la-circulation-routiere-annees-de-2005-a-2019/) from 2019.

## 

It is a 'data.frame' with two columns providing information on the latitude and longitude of road accidents.

```{r}
accidents.2019.paris <- readRDS("data/accidents2019_paris.RDS")
head(accidents.2019.paris)
```

##

You need to convert this 'data.frame' into a spatial object ('sf') using the 'st_as_sf' function. All you have to do is specify the name of the columns containing the coordinates as well as the projection, in this case 'CRS = 4326' (WGS 84). This data is then transformed into 'CRS = 2154' (Lambert 93).

```{r}
accidents.2019.paris <- st_as_sf(accidents.2019.paris,
                                coords = c("long", "lat"),
                                crs = 4326) |>
  st_transform(2154)
```

##

```{r, fig.height=5}
plot(st_geometry(accidents.2019.paris))
```

## Webmaps

Several solutions exist to make interactive maps with R. 'mapview', 'leaflet' and 'mapdeck' are the main ones. 


For simplicity's sake, we're focusing on 'mapview' here. Interactive maps are not necessarily very relevant for representing geostatistical information. On the other hand, they are useful for exploring databases. 

Let's look at an example with 'mapview' regarding fatal accidents in Paris in 2019.

##
```{r}
library(mapview)
```

```{r, echo=FALSE}
#pour marcher avec le format .Rmd
mapviewOptions(fgb = FALSE)
# pour ne pas être trop haut dans les slides
mapviewOptions(leafletHeight=400)
```

```{r}
individus_tues <- accidents.2019.paris |>
  filter(grav == 2) |> # grav = 2 : individus tués
  mutate(age=2019-an_nais) # age
mapview(individus_tues)
```


## 

When you click on a dot, the values of the different variables in the database appear. This can help with database exploration. Let's customize a little...

```{r, echo=FALSE}
# pour ne pas être trop haut dans les slides
mapviewOptions(leafletHeight=300)
```

```{r, cache=FALSE}
mapview(individus_tues,
         legend = TRUE,
        cex = 5, col.regions = "#217844", lwd = 0, alpha = 0.9,
        layer.name = 'Individus tués')
```

## 

Let's customize a little more... However, adding a legend for the size of proportional circles is not easy.


```{r, echo=FALSE}
# pour ne pas être trop haut dans les slides
mapviewOptions(leafletHeight=300)
```

```{r, cache=FALSE}
mapview(individus_tues,
        legend=TRUE,
        layer.name = 'Individus tués',
        cex="age", zcol="sexe", lwd=0, alpha=0.9
       )
```

## Static maps with 'ggplot2' 


Again, different R packages are used to make static maps: 

- 'ggplot2' is a widely used package for all types of charts, and has been adapted specifically for maps ('geom_sf'). 
- The 'tmap' package contains advanced features based on the logic of 'ggplot2' 
- 'mapsf' (successor to 'cartography') is based on a so-called "R-based" language and allows you to make cartographic representations, both basic and advanced. 


## For simplicity's sake, we focus here on 'ggplot2', a well-known package for all types of charts.


##  `geom_sf`

Graphical semiology : 

<img src="img/lightsemio.png" alt="Light Semiology" height="400px">

## 

We work with the IRIS map layer[^1]. 

[^1]: Irises are a statistical zoning of INSEE whose acronym stands for "Grouped Islands for Statistical Information". Their size is around 2000 inhabitants per unit.

```{r, eval=TRUE,cache=FALSE}
library(sf)
library(dplyr)
iris.75 <- st_read("data/iris_75.shp", stringsAsFactors = F)
```
##

Let us count by iris the number of people injured ('nbacc');

```{r, eval=TRUE, fig.height=5}
acc_iris <- iris.75 |> st_join(accidents.2019.paris) |> 
  group_by(CODE_IRIS) |> dplyr::summarize(nb_acc = n(),
            nb_acc_grav = sum(if_else(grav%in%c(2,3), 1, 0),
                        na.rm = TRUE),
            nb_vl = sum(if_else(catv == "VL seul", 1, 0),
                        na.rm = TRUE),
            nb_edp = sum(if_else(catv == "EDP à moteur", 1, 0),
                         na.rm = TRUE),
            nb_velo = sum(if_else(catv == "Bicyclette", 1, 0),
                          na.rm = TRUE)
            ) 
head(acc_iris,1)
```

##

### Proportional symbols

```{r, fig.height=4.75, cache=FALSE}
#| code-fold: !expr code_folding

library(ggplot2)
ggplot() +
  geom_sf(data = acc_iris, colour = "ivory3", fill = "ivory") +
  geom_sf(data = acc_iris |>  st_centroid(),
          aes(size= nb_acc), colour="#E84923CC", show.legend = 'point') +
  scale_size(name = "Nombre d'accidents",
             breaks = c(1,10,100,200),
             range = c(0,5)) +
   coord_sf(crs = 2154, datum = NA,
            xlim = st_bbox(iris.75)[c(1,3)],
            ylim = st_bbox(iris.75)[c(2,4)]) +
  theme_minimal() +
  theme(panel.background = element_rect(fill = "ivory",color=NA),
        plot.background = element_rect(fill = "ivory",color=NA),legend.position = "bottom") +
  labs(title = "Nombre d'accidents de la route à Paris par iris",
       caption = "fichier BAAC 2019, ONISR\nantuki & comeetie, 2023",x="",y="")
```

## 

### Choropleth maps

```{r, fig.height=4.75, cache=FALSE}
#| code-fold: !expr code_folding

library(RColorBrewer) #pour les couleurs des palettes
# Quintiles de la part des accidents ayant eu lieu à vélo
perc_velo = 100*acc_iris$nb_velo/acc_iris$nb_acc
bks <- c(0,round(quantile(perc_velo[perc_velo!=0],na.rm=TRUE,probs=seq(0,1,0.25)),1))
# Intégration dans la base de données
acc_iris <- acc_iris |> mutate(txaccvelo = 100*nb_velo/nb_acc,
                     txaccvelo_cat = cut(txaccvelo,bks,include.lowest = TRUE)) 

# Carte
ggplot() +
  geom_sf(data = iris.75,colour = "ivory3",fill = "ivory") +
  geom_sf(data = acc_iris, aes(fill = txaccvelo_cat)) +
  scale_fill_brewer(name = "Part (En %)",
                    palette = "Reds",
                    na.value = "grey80") +
  coord_sf(crs = 2154, datum = NA,
           xlim = st_bbox(iris.75)[c(1,3)],
           ylim = st_bbox(iris.75)[c(2,4)]) +
  theme_minimal() +
  theme(panel.background = element_rect(fill = "ivory",color=NA),
        plot.background = element_rect(fill = "ivory",color=NA),legend.position="bottom") +
  labs(title = "Part des Accidentés à vélos",
       subtitle = "par arrondissement à Paris en 2019",
       caption = "fichier BAAC 2019, ONISR\nantuki & comeetie, 2023",
       x = "", y = "")
```


## `mapsf`

One example with `mapsf`

```{r, fig.height=4.75, warning=FALSE, message=FALSE}
#| code-fold: !expr code_folding

library(mapsf)
mf_theme("default",cex=0.9,mar=c(0,0,1.2,0),bg="ivory")
mf_init(x = acc_iris, expandBB = c(0, 0, 0, .15)) 
mf_map(acc_iris,add = TRUE,col = "ivory2")
# Plot symbols with choropleth coloration
mf_map(
  x = acc_iris |>  st_centroid(),
  var = c("nb_acc", "txaccvelo"),
  type = "prop_choro",
  border = "grey50",
  lwd = 0.1,
  leg_pos = c("topright","right"),
  leg_title = c("Nombre d'accidents", "Part des accidentés à vélo"),
  breaks = c(0,8,15,25,100),
  nbreaks = 5,
  inches= 0.16,
  pal = "Reds",
  leg_val_rnd = c(0, 0),
  leg_frame = c(TRUE, TRUE)
)
mf_layout(
  title = "Nombre d'accidents de la route et proportions d'accidents impliquant des vélos",
  credits = "fichier BAAC 2019, ONISR\nantuki & comeetie, 2023",
  frame = TRUE)
```


# Go further

## Raster 

- [`stars`](https://github.com/r-spatial/stars/) et [`terra`](https://github.com/rspatial/terra) 

![](https://raw.githubusercontent.com/r-spatial/stars/master/images/cube1.png)

## Geocoding

- [`banR`](https://github.com/joelgombin/banR) et [`tidygeocoder`](https://github.com/jessecambon/tidygeocoder)

<!-- evaluation désactivée en raison d'un bug de timeout en intégration continue -->

```{r, eval=TRUE}
library(dplyr, warn.conflicts = FALSE)
library(tidygeocoder)

# create a dataframe with addresses
addresses <- tibble::tribble(
~name,                  ~addr,
"Campus Hannah-Arendt",          "74 Rue Louis Pasteur, 84029 Avignon",
"palais des Papes", "Pl. du Palais, 84000 Avignon"                                
)

# geocode the addresses
lat_longs <- addresses |>
  tidygeocoder::geocode(addr, method = 'osm')
lat_longs
```


## OSM data

- [`osmdata`](https://github.com/ropensci/osmdata)

```{r}
library(osmdata)
bb = c(4.75, 43.92, 4.85, 43.97) # Avignon
roads <- opq (bbox = bb) |> 
    add_osm_feature (key = "highway") |>
    osmdata_sf()
```

##

```{r}
plot(roads$osm_lines |> dplyr::filter(highway=="primary") |> st_geometry(),lwd=1.5,col="#000000")
plot(roads$osm_lines |> dplyr::filter(highway=="secondary") |> st_geometry(),lwd=1,add=TRUE,col="blue")
plot(roads$osm_lines |> dplyr::filter(highway=="tertiary" | highway=="residential" ) |> st_geometry(),add=TRUE,col="orange")
plot(roads$osm_lines |> dplyr::filter(highway=="living_street" ) |> st_geometry(),add=TRUE,col="red")
```


## networks 

- [`sfnetworks`](https://luukvdmeer.github.io/sfnetworks/) et [`tidygraph`](https://tidygraph.data-imaginist.com/index.html)

```{r}
library(sfnetworks)
rtype=c("primary","secondary","tertiary","residential")
net = sfnetworks::as_sfnetwork(roads$osm_lines|> dplyr::filter(highway %in% rtype))
plot(net|>activate("edges")|>st_geometry(),col="#444444")
plot(net|>activate("nodes")|>st_geometry(),col="red", cex = 0.2,add=TRUE)
```


## inetractive webmaping with deck.gl

- [`mapdeck`](https://github.com/SymbolixAU/mapdeck)

<p></p>

![](https://github.com/SymbolixAU/mapdeck/raw/master/docs/articles/img/articles/hexagons.png)

## Ressources 

- [geocomputation with R](https://r.geocompx.org/spatial-operations)

- [rspatial](https://r-spatial.org/)

- [CRAN task views](https://cran.r-project.org/web/views/) permet d'avoir des informations sur les packages du CRAN pertinents pour des tâches reliées à certains sujets. 

##

[CRAN Task View: Analysis of Spatial Data](https://CRAN.R-project.org/view=Spatial):  

- Classes for spatial data   
- Handling spatial data   
- Reading and writing spatial data   
- Visualisation  
- Point pattern analysis  
- Geostatistics  
- Disease mapping and areal data analysis  
- Spatial regression  
- Ecological analysis  

# <small> Credits</small> 

This training is inspired, as well as its tutorial, by a [previous] training(https://github.com/comeetie/satRday) given by me and Kim Antunez and Timothée Giraud.


# <small> Session infos</small> 

```{r}
sessionInfo()
```
